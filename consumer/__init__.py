"""
The Consumer class definition for handling data processing
for the Phrasetank application
"""

import threading
import hashlib
from phrasetank.storage import PhrasetankStorage

class PhrasetankConsumer(threading.Thread):
    def __init__(self):
        
        threading.Thread.__init__(self)
        self.dataContent = None
        self.producerName = None
    
    def setDataContent(self,content):
        """
        Set the data content generated by the producers
        this content will be sliced, diced and pulverized
        by the Pulverizer object
        """
        self.dataContent = content.strip().strip('"').strip("'")
        
        return self
    
    def setProducerName(self,producer_name):
        """
        Set the name of the producer will be using it to
        log the data to dist
        """
        self.producerName = producer_name.lower()
        
        return self
    def run(self):
        """
        Start running the producer
        """
        # generate a hash of the datacontent as wel as a file name for the
        # datasource and send it to phrasetank storage for writing to disk
        if self.dataContent:
            
            data_hash = hashlib.md5(self.dataContent)
            data_hash = data_hash.hexdigest()
            filename = self.producerName+'-'+data_hash+'.txt'
            PhrasetankStorage.writeFile(filename,self.dataContent)
        
    
    
    